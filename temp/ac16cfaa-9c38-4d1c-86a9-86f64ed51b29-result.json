{"name": "正确获取所有商品优选数据", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <test_case.test_case.TestCase object at 0x000002500DFD8A00>\ncase = {'case_controller': '', 'case_desc': '', 'case_fun': '获取所有商品优选', 'case_moudle': '商品优选管理', ...}\n\n    @pytest.mark.parametrize('case', TestCaseData.getExcelCases())\n    def test_excel(self, case):\n        \"\"\"\n        执行测试用例\n        :return:\n        \"\"\"\n        print('开始用例测试', case)\n        # 请求方式\n        pattern = case.get('pattern')\n    \n        # 设置用例名称\n        allure.dynamic.feature(case.get('case_moudle'))\n        allure.dynamic.story(case.get('case_fun'))\n        allure.dynamic.title(case.get('case_name'))\n        allure.dynamic.description(case.get('case_desc'))\n    \n        url = self.buildUrl(case)\n    \n>       headers = self.buildHeaders(case)\n\ntest_case\\test_case.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_case\\test_case.py:64: in buildHeaders\n    return json.loads(headers)\nD:\\python3.9\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nD:\\python3.9\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000002500D7C2A00>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\python3.9\\lib\\json\\decoder.py:355: JSONDecodeError"}, "steps": [{"name": "构建请求路径", "status": "passed", "parameters": [{"name": "case", "value": "{'case_number': 'T003', 'case_moudle': '商品优选管理', 'case_fun': '获取所有商品优选', 'case_name': '正确获取所有商品优选数据', 'case_desc': '', 'case_url': '', 'case_controller': '', 'pattern': '', 'headers': '', 'param': '', 'result': '', 'expect': '', 'trust_result': '', 'floor': ''}"}], "start": 1609401458333, "stop": 1609401458333}, {"name": "构建请求头", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n", "trace": "  File \"D:\\python3.9\\lib\\site-packages\\allure_commons\\_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"E:\\python_work\\auto_interface\\V1.0.1\\test_case\\test_case.py\", line 64, in buildHeaders\n    return json.loads(headers)\n  File \"D:\\python3.9\\lib\\json\\__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"D:\\python3.9\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"D:\\python3.9\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n"}, "parameters": [{"name": "case", "value": "{'case_number': 'T003', 'case_moudle': '商品优选管理', 'case_fun': '获取所有商品优选', 'case_name': '正确获取所有商品优选数据', 'case_desc': '', 'case_url': '', 'case_controller': '', 'pattern': '', 'headers': '', 'param': '', 'result': '', 'expect': '', 'trust_result': '', 'floor': ''}"}], "start": 1609401458333, "stop": 1609401458333}], "start": 1609401458333, "stop": 1609401458334, "uuid": "ad3819da-6b61-4d40-8b68-396ce161cc76", "historyId": "899df1a120f8586178240f0a03519cc7", "testCaseId": "3eda8e63bd9a4314c2b5a24d7dc1b926", "fullName": "test_case.test_case.TestCase#test_excel", "labels": [{"name": "feature", "value": "商品优选管理"}, {"name": "story", "value": "获取所有商品优选"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_case"}, {"name": "subSuite", "value": "TestCase"}, {"name": "host", "value": "LAPTOP-TBMD39IH"}, {"name": "thread", "value": "2700-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_case"}]}