{
  "uid" : "607747764fcb5f99",
  "name" : "正确获取所有商品优选数据",
  "fullName" : "test_case.test_case.TestCase#test_excel",
  "historyId" : "899df1a120f8586178240f0a03519cc7",
  "time" : {
    "start" : 1609402271679,
    "stop" : 1609402286955,
    "duration" : 15276
  },
  "status" : "broken",
  "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <test_case.test_case.TestCase object at 0x000001DBE85F1040>\ncase = {'case_controller': '/prefrenceArea/listAll', 'case_desc': '', 'case_fun': '获取所有商品优选', 'case_moudle': '商品优选管理', ...}\n\n    @pytest.mark.parametrize('case', TestCaseData.getExcelCases())\n    def test_excel(self, case):\n        \"\"\"\n        执行测试用例\n        :return:\n        \"\"\"\n        print('开始用例测试', case)\n        # 请求方式\n        pattern = case.get('pattern')\n    \n        # 设置用例名称\n        allure.dynamic.feature(case.get('case_moudle'))\n        allure.dynamic.story(case.get('case_fun'))\n        allure.dynamic.title(case.get('case_name'))\n        allure.dynamic.description(case.get('case_desc'))\n    \n        url = self.buildUrl(case)\n    \n        headers = self.buildHeaders(case)\n    \n>       param = self.buildParams(case)\n\ntest_case\\test_case.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_case\\test_case.py:80: in buildParams\n    return json.loads(param) if param is not None else {}\nD:\\python3.9\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nD:\\python3.9\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001DBE6DEDF70>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\python3.9\\lib\\json\\decoder.py:355: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <test_case.test_case.TestCase object at 0x000001DBE85F1040>\ncase = {'case_controller': '/prefrenceArea/listAll', 'case_desc': '', 'case_fun': '获取所有商品优选', 'case_moudle': '商品优选管理', ...}\n\n    @pytest.mark.parametrize('case', TestCaseData.getExcelCases())\n    def test_excel(self, case):\n        \"\"\"\n        执行测试用例\n        :return:\n        \"\"\"\n        print('开始用例测试', case)\n        # 请求方式\n        pattern = case.get('pattern')\n    \n        # 设置用例名称\n        allure.dynamic.feature(case.get('case_moudle'))\n        allure.dynamic.story(case.get('case_fun'))\n        allure.dynamic.title(case.get('case_name'))\n        allure.dynamic.description(case.get('case_desc'))\n    \n        url = self.buildUrl(case)\n    \n        headers = self.buildHeaders(case)\n    \n>       param = self.buildParams(case)\n\ntest_case\\test_case.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_case\\test_case.py:80: in buildParams\n    return json.loads(param) if param is not None else {}\nD:\\python3.9\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nD:\\python3.9\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001DBE6DEDF70>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\python3.9\\lib\\json\\decoder.py:355: JSONDecodeError",
    "steps" : [ {
      "name" : "构建请求路径",
      "time" : {
        "start" : 1609402273292,
        "stop" : 1609402274590,
        "duration" : 1298
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "case",
        "value" : "{'case_number': 'T003', 'case_moudle': '商品优选管理', 'case_fun': '获取所有商品优选', 'case_name': '正确获取所有商品优选数据', 'case_desc': '', 'case_url': 'http://admin-api.macrozheng.com', 'case_controller': '/prefrenceArea/listAll', 'pattern': 'GET', 'headers': '{\\n\"Content-Type\":\"application/json\"\\n        }', 'param': '', 'result': 'message', 'expect': '操作成功', 'trust_result': '', 'floor': ''}"
      } ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "构建请求头",
      "time" : {
        "start" : 1609402275246,
        "stop" : 1609402276222,
        "duration" : 976
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "case",
        "value" : "{'case_number': 'T003', 'case_moudle': '商品优选管理', 'case_fun': '获取所有商品优选', 'case_name': '正确获取所有商品优选数据', 'case_desc': '', 'case_url': 'http://admin-api.macrozheng.com', 'case_controller': '/prefrenceArea/listAll', 'pattern': 'GET', 'headers': '{\\n\"Content-Type\":\"application/json\"\\n        }', 'param': '', 'result': 'message', 'expect': '操作成功', 'trust_result': '', 'floor': ''}"
      } ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "构建请求参数",
      "time" : {
        "start" : 1609402276949,
        "stop" : 1609402286951,
        "duration" : 10002
      },
      "status" : "broken",
      "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"D:\\python3.9\\lib\\site-packages\\allure_commons\\_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"E:\\python_work\\auto_interface\\V1.0.1\\test_case\\test_case.py\", line 80, in buildParams\n    return json.loads(param) if param is not None else {}\n  File \"D:\\python3.9\\lib\\json\\__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"D:\\python3.9\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"D:\\python3.9\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "case",
        "value" : "{'case_number': 'T003', 'case_moudle': '商品优选管理', 'case_fun': '获取所有商品优选', 'case_name': '正确获取所有商品优选数据', 'case_desc': '', 'case_url': 'http://admin-api.macrozheng.com', 'case_controller': '/prefrenceArea/listAll', 'pattern': 'GET', 'headers': '{\\n\"Content-Type\":\"application/json\"\\n        }', 'param': '', 'result': 'message', 'expect': '操作成功', 'trust_result': '', 'floor': ''}"
      } ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "商品优选管理"
  }, {
    "name" : "story",
    "value" : "获取所有商品优选"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_case"
  }, {
    "name" : "subSuite",
    "value" : "TestCase"
  }, {
    "name" : "host",
    "value" : "LAPTOP-TBMD39IH"
  }, {
    "name" : "thread",
    "value" : "20204-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "607747764fcb5f99.json",
  "parameterValues" : [ ]
}